use clap::{
    App, Arg, ArgGroup, ValueHint
};
use crate::constants::{args::*, groups::*};

pub fn add_host_discovery(app: App<'static>) -> App<'static> {
    app
        .help_heading(host_discovery::NAME)
        .arg(
            Arg::new(list_scan::NAME)
                .long(list_scan::LONG)
                .about(list_scan::HELP)
                .takes_value(false)
        )
        .arg(
            Arg::new(ping_scan::NAME)
                .long(ping_scan::LONG)
                .about(ping_scan::HELP)
                .takes_value(false)
        )
        .arg(
            Arg::new(skip_host_discovery::NAME)
                .long(skip_host_discovery::LONG)
                .about(skip_host_discovery::HELP)
                .takes_value(false)
        )
        .arg(
            Arg::new(tcp_syn_discovery::NAME)
                .long(tcp_syn_discovery::LONG)
                .about(tcp_syn_discovery::HELP)
                .value_name(tcp_syn_discovery::VALUE_NAME)
                .takes_value(true)
                .value_hint(ValueHint::Other)
        )
        .arg(
            Arg::new(tcp_ack_discovery::NAME)
                .long(tcp_ack_discovery::LONG)
                .about(tcp_ack_discovery::HELP)
                .value_name(tcp_ack_discovery::VALUE_NAME)
                .takes_value(true)
                .value_hint(ValueHint::Other)
        )
        .arg(
            Arg::new(udp_discovery::NAME)
                .long(udp_discovery::LONG)
                .about(udp_discovery::HELP)
                .value_name(udp_discovery::VALUE_NAME)
                .takes_value(true)
                .value_hint(ValueHint::Other)
        )
        .arg(
            Arg::new(sctp_discovery::NAME)
                .long(sctp_discovery::LONG)
                .about(sctp_discovery::HELP)
                .value_name(sctp_discovery::VALUE_NAME)
                .takes_value(true)
                .value_hint(ValueHint::Other)
        )
        .arg(
            Arg::new(icmp_echo_discovery::NAME)
                .long(icmp_echo_discovery::LONG)
                .about(icmp_echo_discovery::HELP)
                .takes_value(false)
        )
        .arg(
            Arg::new(icmp_timestamp_discovery::NAME)
                .long(icmp_timestamp_discovery::LONG)
                .about(icmp_timestamp_discovery::HELP)
                .takes_value(false)
        )
        .arg(
            Arg::new(icmp_netmask_discovery::NAME)
                .long(icmp_netmask_discovery::LONG)
                .about(icmp_netmask_discovery::HELP)
                .takes_value(false)
        )
        .arg(
            Arg::new(ip_protocol_ping::NAME)
                .long(ip_protocol_ping::LONG)
                .about(ip_protocol_ping::HELP)
                .takes_value(true)
                .value_name(ip_protocol_ping::VALUE_NAME)
        )
        .arg(
            Arg::new(never_resolve::NAME)
                .short(never_resolve::SHORT)
                .about(never_resolve::HELP)
                .takes_value(false)
                .conflicts_with(always_resolve::NAME)
        )
        .arg(
            Arg::new(always_resolve::NAME)
                .short(always_resolve::SHORT)
                .about(always_resolve::HELP)
                .takes_value(false)
                .conflicts_with(never_resolve::NAME)
        )
        .arg(
            Arg::new(dns_servers::NAME)
                .long(dns_servers::LONG)
                .about(dns_servers::HELP)
                .takes_value(true)
                .value_name(dns_servers::VALUE_NAME)
                .value_hint(ValueHint::Hostname)
        )
        .arg(
            Arg::new(system_dns::NAME)
                .long(system_dns::LONG)
                .about(system_dns::HELP)
                .takes_value(false)
        )
        .arg(
            Arg::new(traceroute::NAME)
                .long(traceroute::LONG)
                .about(traceroute::HELP)
                .takes_value(false)
        )
        .group(
            ArgGroup::new(host_discovery::NAME)
                .multiple(true)
                .args(&[
                    list_scan::NAME, ping_scan::NAME, skip_host_discovery::NAME,
                    tcp_syn_discovery::NAME, tcp_ack_discovery::NAME, udp_discovery::NAME,
                    sctp_discovery::NAME, icmp_echo_discovery::NAME, icmp_timestamp_discovery::NAME,
                    icmp_netmask_discovery::NAME, ip_protocol_ping::NAME, never_resolve::NAME,
                    always_resolve::NAME, dns_servers::NAME, system_dns::NAME, traceroute::NAME
                ])
        )
}